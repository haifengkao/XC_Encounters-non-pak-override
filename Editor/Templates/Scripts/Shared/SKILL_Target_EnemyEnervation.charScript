#TEMPLATE "_SKILL_Base" : Target_EnemyEnervation

INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_EnemyEnervation=-1000000
// [GLOBAL_VARS]
INT:%ClassScore_Target_EnemyEnervation
// [~GLOBAL_VARS]

EVENTS

// [EVENTS]
// [~EVENTS]

// Calculate the priority of the skill
EVENT CalculateScore_Target_EnemyEnervation
VARS
	// [CALC_VARS]
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_EnemyEnervation")
ACTIONS
	Set(%SkillTargetScore_Target_EnemyEnervation, -1000000)

	// [CALC_ACTIONS_PRE]
	Set(%ClassScore_Target_EnemyEnervation, 0)
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IterateCharactersInCombat(__Me, "CalculateTarget_Target_EnemyEnervation", Random, Vitality)
	IF "!c1"
		IsEqual(%SkillTargetChar_Target_EnemyEnervation, null)
	THEN
		Add(%ActionScore_Target_EnemyEnervation, %SkillTargetScore_Target_EnemyEnervation)
	ENDIF
	// [~CALC_ACTIONS]

	

	
// Calculate the character we should attack
EVENT CalculateTarget_Target_EnemyEnervation
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	INT:_ClassScore_Target_EnemyEnervation
	FLOAT:_StatVitality
	FLOAT:_Score
	INT:_HostileCount
	FLOAT:_HostileScore=0
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_EnemyEnervation")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_ClassScore_Target_EnemyEnervation, %ClassScore_Target_EnemyEnervation)
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "(!c1&!c2&!c3)&((c4)|c5)&(!((((((c6&c7)|c8)|c9)|c10)|c11)|c12))&(c13)&(c14)&(c15)&(c16)"
	    CharacterIsDead(_Char) // c1
	    CharacterHasStatus(_Char, INVISIBLE) // c2
	    CharacterHasStatus(_Char, SNEAKING) // c3
	    CharacterHasStatus(_Char, BLESSED) // c4
	    CharacterIsBetterOrEqualClass(_Char, %ClassScore_Target_EnemyEnervation, _ClassScore_Target_EnemyEnervation, 5, 5, 4, 4, 5) // c5
	    CharacterGetStat(_StatVitality, _Char, Vitality) // c6
	    IsLessThen(_StatVitality, 0.2) // c7
	    CharacterHasStatus(_Char, BLEEDING) // c8
	    CharacterHasStatus(_Char, POISONED) // c9
	    CharacterHasStatus(_Char, PETRIFIED) // c10
	    CharacterHasStatus(_Char, STUNNED) // c11
	    CharacterHasStatus(_Char, FROZEN) // c12
	    CharacterIsEnemy(__Me, _Char) // c13
	    CharacterGetHostileCount(_HostileCount, _Char) // c14
	    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_EnemyEnervation) // c15
	    GetDistance(_DistanceToChar, __Me, _Char) // c16
	THEN
	    Set(%ClassScore_Target_EnemyEnervation, _ClassScore_Target_EnemyEnervation)
	    IF "(c1)"
	        CharacterHasStatus(_Char, BLESSED) // c1
	    THEN
	        Add(_Score, 5.0)
	    ENDIF
	    // Hostile count score calculation
	    IF "(c1)"
	        IsGreaterThen(_HostileCount, 2) // c1
	    THEN
	        Set(_HostileScore, 10.0)
	    ENDIF
	    Add(_Score, _HostileScore)
	    
	    // Range score calculation
	    Set(_DistanceScore, _DistanceToChar)
	    IF "(c1)"
	        IsGreaterThen(_DistanceScore, _SkillRangeMax) // c1
	    THEN
	        Subtract(_DistanceScore, _SkillRangeMax)
	        Multiply(_DistanceScore, -1.0)
	    ELIF "(c1)"
	        IsLessThen(_DistanceScore, _SkillRangeMin) // c1
	    THEN
	        Subtract(_DistanceScore, _SkillRangeMin)
	        Multiply(_DistanceScore, 1.0)
	    ELSE 
	        Set(_DistanceScore, 0.0)
	    ENDIF
	    Add(_Score, _DistanceScore)
	    
	    // Can see score calculation
	    IF "!c1"
	    	CharacterCanSee(__Me, _Char)
	    THEN
	    	Add(_Score, -10.0)
	    ENDIF
	    
	    IF "c1"
	    	IsGreaterThen(_Score, %SkillTargetScore_Target_EnemyEnervation)
	    THEN
	    	Set(%SkillTargetChar_Target_EnemyEnervation, _Char)
	    	Set(%SkillTargetScore_Target_EnemyEnervation, _Score)
	    ENDIF	
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	