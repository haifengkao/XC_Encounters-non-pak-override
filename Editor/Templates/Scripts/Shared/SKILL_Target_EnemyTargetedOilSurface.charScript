#TEMPLATE "_SKILL_Base" : Target_EnemyTargetedOilSurface

INIT
CHARACTER:__Me
FLOAT:%SkillTargetScore_Target_EnemyTargetedOilSurface=-1000000
// [GLOBAL_VARS]
// [~GLOBAL_VARS]

EVENTS

// [EVENTS]
// [~EVENTS]

// Calculate the priority of the skill
EVENT CalculateScore_Target_EnemyTargetedOilSurface
VARS
	// [CALC_VARS]
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_SkillImpactRange
	FLOAT3:_TargetPos
	// [~CALC_VARS]
ON
	OnFunction("CalculateScore_Target_EnemyTargetedOilSurface")
ACTIONS
	Set(%SkillTargetScore_Target_EnemyTargetedOilSurface, -1000000)

	// [CALC_ACTIONS_PRE]
	// [~CALC_ACTIONS_PRE]
	// [CALC_ACTIONS]
	IF "(c1)&(c2)&(c3)"
	    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_EnemyTargetedOilSurface) // c1
	    CharacterGetSkillImpactRange(_SkillImpactRange, __Me, Target_EnemyTargetedOilSurface) // c2
	    FindPosition(_TargetPos, __Me, _SkillRangeMax, _SkillImpactRange, __Me, -1, -1, 2, -1) // c3
	THEN
	    Set(%SkillTargetPos_Target_EnemyTargetedOilSurface, _TargetPos)
	    Add(%ActionScore_Target_EnemyTargetedOilSurface, 20.0)
	ELSE 
	    IterateCharactersInCombat(__Me, "CalculateTarget_Target_EnemyTargetedOilSurface", Random, Vitality)
	    IF "!c1"
	    	IsEqual(%SkillTargetChar_Target_EnemyTargetedOilSurface, null)
	    THEN
	    	Add(%ActionScore_Target_EnemyTargetedOilSurface, %SkillTargetScore_Target_EnemyTargetedOilSurface)
	    ENDIF
	ENDIF
	// [~CALC_ACTIONS]

	

	
// Calculate the character we should attack
EVENT CalculateTarget_Target_EnemyTargetedOilSurface
VARS	
	CHARACTER:_Char
	// [CALC_TARGET_VARS]
	FLOAT:_Score
	FLOAT:_SkillRangeMin
	FLOAT:_SkillRangeMax
	FLOAT:_DistanceToChar
	FLOAT:_DistanceScore
	// [~CALC_TARGET_VARS]
ON
	OnIterateCharacter(_Char, "CalculateTarget_Target_EnemyTargetedOilSurface")	
ACTIONS
	// [CALC_CHAR_TARGET_ACTIONS_PRE]
	Set(_Score, 0.0)
	// [~CALC_CHAR_TARGET_ACTIONS_PRE]
	// [CALC_CHAR_TARGET_ACTIONS]
	IF "(!c1&!c2&!c3)&(!(((((c4)|c5)|c6)|c7)|c8))&(c9)&(c10)&(c11)"
	    CharacterIsDead(_Char) // c1
	    CharacterHasStatus(_Char, INVISIBLE) // c2
	    CharacterHasStatus(_Char, SNEAKING) // c3
	    CharacterHasStatus(_Char, SLOWED) // c4
	    CharacterHasStatus(_Char, KNOCKED_DOWN) // c5
	    CharacterHasStatus(_Char, PETRIFIED) // c6
	    CharacterHasStatus(_Char, STUNNED) // c7
	    CharacterHasStatus(_Char, FROZEN) // c8
	    CharacterIsEnemy(__Me, _Char) // c9
	    CharacterGetSkillRange(_SkillRangeMin, _SkillRangeMax, __Me, Target_EnemyTargetedOilSurface) // c10
	    GetDistance(_DistanceToChar, __Me, _Char) // c11
	THEN
	    IF "(c1)"
	        CharacterHasStatus(_Char, BURNING) // c1
	    THEN
	        Add(_Score, 5.0)
	    ENDIF
	    // Hostile count score calculation
	    Add(_Score, 10.0) // HostileWeight
	    
	    // Range score calculation
	    Set(_DistanceScore, _DistanceToChar)
	    IF "(c1)"
	        IsGreaterThen(_DistanceScore, _SkillRangeMax) // c1
	    THEN
	        Subtract(_DistanceScore, _SkillRangeMax)
	        Multiply(_DistanceScore, -1.0)
	    ELIF "(c1)"
	        IsLessThen(_DistanceScore, _SkillRangeMin) // c1
	    THEN
	        Subtract(_DistanceScore, _SkillRangeMin)
	        Multiply(_DistanceScore, 1.0)
	    ELSE 
	        Set(_DistanceScore, 0.0)
	    ENDIF
	    Add(_Score, _DistanceScore)
	    
	    // Can see score calculation
	    IF "!c1"
	    	CharacterCanSee(__Me, _Char)
	    THEN
	    	Add(_Score, -10.0)
	    ENDIF
	    
	    IF "c1"
	    	IsGreaterThen(_Score, %SkillTargetScore_Target_EnemyTargetedOilSurface)
	    THEN
	    	Set(%SkillTargetChar_Target_EnemyTargetedOilSurface, _Char)
	    	Set(%SkillTargetScore_Target_EnemyTargetedOilSurface, _Score)
	    ENDIF	
	ENDIF
	// [~CALC_CHAR_TARGET_ACTIONS]
	
	
	
	
	
	
	
	